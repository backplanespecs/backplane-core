Proposed Backplane Protocol v.2

References
==========

 • OAuth 2.0 is defined at: http://tools.ietf.org/html/draft-ietf-oauth-v2-15

 • OAuth 2.0 Bearer tokens: http://tools.ietf.org/html/draft-ietf-oauth-v2-bearer-04

Prerequisites
=============

Backplane server has to support TLS 1.2 (RFC5246) or later (OAuth 2.0
requirement).

Backplane clients and servers MUST be able to handle OAuth 2.0 Bearer
tokens.

Operational semantics
=====================

Conceptually a Backplane server maintains an ordered list of messages it
has received. The list is ordered by message age from the oldest to the
newest. Once a message's age reaches a certain threshold, the server
disposes of the message.

Each message has a unique sequence number and is associated with a bus and
a channel. Sequence numbers are monotonically increasing integers. Buses and
channels are referenced by names.

Here is a diagram of a list of messages in a server's buffer. Sequence
numbers 10..14 are assigned to the messages and each message references a
bus (Ba, Bb) and a channel (Ca, Cb, Cc, Cd) is was posted to. Message with
sequence number 10 is the oldest one in the buffer.

[Ba,Ca]-->[Ba,Cb]-->[Bb,Cc]-->[Ba,Ca]-->[Bb,Cd]
   10        11        12        13        14

The server issues access tokens to the clients to retrieve a certain subset
of the messages from the server's buffer. Each access token has associated
scope which can be either a list of bus names (meaning "messages that have
been posted to any of the listed buses") or a specific channel name
(meaning "messages posted to the channel").

To retrieve messages from a server, a client presents an access token and may
optionally include a reference to a previously retrieved message. Such
references are opaque to clients but can be mapped to a message sequence
number by the server.

When fulfilling a retrieval request, a server first locates the oldest
message in the buffer that is a candidate to be returned. If no message
reference was passed along in the request, such candidate is just the oldest
message in the buffer (message 10 in the above example).

If a client passes a message reference along, the server maps such
reference to a sequence number and tries to locate the corresponding
message. If such message has already been disposed of, the first candidate
to be returned is the oldest message currently in the buffer. Continuing
with the above example, if the server is presented a reference that maps to
sequence number 8, then message 10 is again the first candidate to be
returned.

If a client passes a reference to a still existing message, the server
locates the immediately following one and uses it as a candidate. For
example, if the server in the above example is passed a reference that maps
to message 11, then message 12 becomes a candidate to be returned.

Once the oldest candidate message is located, a server traverses the list
checking whether each message matches the scope associated with the access
token presented by the client. For the example above, if the scope is "bus
Ba" and the first candidate is message 10, the server will return messages
10, 11 and 13.

A reponse to a retrieval request also contains a reference to a message that
is currently the newest in the buffer. This allows the client to present the
reference in a subsequent request to pick up where it has left off.

Methods
=======

POST /auth (HTTPS only)
-----------------------

This is an OAuth "Token Endpoint" as defined in section 2.2. of the OAuth 2.0
spec.

The parameters MUST be passed in the request body using the
"application/x-www-form-urlencoded" format.

Parameters:
 • client_id (string) — client id. 
 • client_secret (optional string) — client secret.
 • grant_type (string) — MUST be "client_credentials".
 • scope (optional string) — a list of space-delimited case-sensitive
 strings denoting Backplane bus names the client is interested in.

If the "client_id" parameter is set to "anonymous", the request implies
anonymous access mode. The client MUST omit the "client_secret" parameter in
this case. The server MUST ignore the value of the "scope" parameter.

In anonymous mode the server allocates a new channel and grants the client
restricted access (no message payloads) to this channel. The channel is not
bound to a bus until the first message is posted to the channel.

If both "client_id" and "client_secret" are present, the server MUST check
the credentials of the client. If the credentials are valid, authenticated
access mode is assumed; otherwise the server MUST return error per section
5.2 of the OAuth 2.0 spec (error "unautorized_client").

In authenticated mode the server MUST check that the client making the request
is authorized to access the buses enlisted in the value of the parameter. If
the client is not authorized to access a bus it's requesting access to, the
server MUST return error per section 5.2 of the OAuth spec (error
"invalid_scope").

In authenticated mode the server grants the client full access to the
specified buses. If no "scope" parameter was specified in the request, the
client is granted access to all buses it is authorized to per the server
configuration. Full access implies that the client can retrieve full
messages (including payloads) and post messages to the buses it has been
granted access to as a result of the request.

On success, returns a JSON object per section 5.1 of the OAuth spec.

Tokens granted to anonymous clients MUST expire. It is RECOMMENDED that
such tokens expire within 1 hour after having been issued.

The server MUST include the "expires_in" parameter if the issued token is
set to expire.

The server MUST NOT include the "refresh_token" into the response.

Response example:
{
	"access_token": "465203f03680f59b7ddd5e1e5d851461",
	"token_type": "Bearer"
}

GET /auth (HTTPS)
-----------------

This method is provided to facilitate anonymous authentication for
JavaScript clients running in browsers.

Parameters:
 • callback (string) — callback function to pad the response with. MUST only
 contain alphanumeric characters (a-zA-Z0-9).

This call MUST be treated by the server equivalently to the "POST /auth"
with the following parameters:
 • client_id — "anonymous"
 • grant_type — "client_credentials"

The semantics and returned values are the same as with the "POST /auth"
method. The only difference is that the returned values are padded with the
value of the "callback" parameter.

GET /messages
-------------

Retrieve messages from the server with an optional reference to a previously
retrieved message. The server responds to this call as described in the
"Operational semantics".

Parameters:
 • block (integer, default 0) — if no messages are available for immediate
	 retrieval, this parameter communicates how long (in seconds) the
	 server should wait before returning an empty response.
 • callback (string) — callback function to pad the response with. MUST only
 contain alphanumeric characters (a-zA-Z0-9).
 • ref (optional, string) — a reference to a previously retrieved message.

Authorization: the client MUST present the access token it has received in
the call to "POST /auth" method as described in sections 2.2 and 2.4 of OAuth
Bearer Token spec.

Returns:
 • next_url (string) — a complete URL that the client can invoke to retrieve
 	subsequent messages from the server.
 • messages[] — an array of messages in the order they were originally
 	received by the server. Each message within the array is represented
	as a JSON object of the same structure as returned by
	"GET /message/<MSG>" API method.

Response example:
{
	"next_url": "https://bp.example.com/v2/messages?ref=958bfa2dd8aed82c86afbd54b4a314a5",
	"messages": [
		XXX: to be revised
		{
			"bus": "customer.com",
			"channel": "67dc880cc265b0dbc755ea959b257118",
			"messageURL": "https://bp.example.com/v2/message/097a5cc401001f95b45d37aca32a3bd2",
			"originURL": "https://bp.example.com/v2/client/echo",
			"payload": {
				"role": "administrator"
			},
			"type": "identity/ack"
		}
	]
}

POST /message (privileged access only)
--------------------------------------

Publish a message to the Backplane.

Parameters:
 • bus (string) — the bus to post the message to.
 • channel (string) — the id of a Backplane channel to post the message to.
 	The channel has to belong to the bus associated with the client.
 • payload (object, optional) — message payload. Only available to
	privileged access clients.
 • type (string) — message type (arbitrary string).

Returns:
 • Status code 201 ("Created") upon success. The "Location" header of the
 response refers to the message resource URL.
 • Status code XXX if the client has no permission to post to the channel.

Request example:
{
	"bus": "customer.com",
	"channel": "67dc880cc265b0dbc755ea959b257118",
	"payload": {
		"role": "administrator"
	},
	"type": "identity/ack"
}

GET /message/<MSG>
------------------

Retrieve a message from the server.

Parameters:
 • callback (string, optional) — to package results as JSONP.

Returns:
 • Status code 200 ("OK") if the message is available. The body of the
 response is a JSON object of the following structure:
	 • bus (string) — the Backplane bus the message was posted do.
	 • channel (string) — the id of a Backplane channel the message was
		posted do.
	 • messageURL (string) — a URL of the message.
	 • originURL (string) — the resource URL of a client which
		originally posted the message.
	 • payload (object, optional) — message payload. Only available to
		privileged access clients.
	 • type (string) — message type (arbitrary string).

Response example:
{
	"bus": "customer.com",
	"channel": "67dc880cc265b0dbc755ea959b257118",
	"messageURL": "https://bp.example.com/v2/message/097a5cc401001f95b45d37aca32a3bd2",
	"originURL": "https://bp.example.com/v2/client/echo",
	"payload": {
		"role": "administrator"
	},
	"type": "identity/ack"
}
