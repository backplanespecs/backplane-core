Proposed Backplane Protocol v.2

References
==========

 • OAuth 2.0 is defined at: http://tools.ietf.org/html/draft-ietf-oauth-v2-15

 • OAuth 2.0 Bearer tokens: http://tools.ietf.org/html/draft-ietf-oauth-v2-bearer-04

Prerequisites
=============

Backplane server has to support TLS 1.2 (RFC5246) or later (OAuth 2.0
requirement).

Backplane clients and servers MUST be able to handle OAuth 2.0 Bearer
tokens.

Methods
=======

POST /auth (HTTPS only)
-----------------------

This is an OAuth "Token Endpoint" as defined in section 2.2. of the OAuth 2.0
spec.

The parameters MUST be passed in the request body using the
"application/x-www-form-urlencoded" format.

Parameters:
 • client_id (string) — client id. 
 • client_secret (optional string) — client secret.
 • grant_type (string) — MUST be "client_credentials".
 • scope (optional string) — a list of space-delimited case-sensitive
 strings denoting Backplane bus names the client is interested in.

If the "client_id" parameter is set to "anonymous", the request implies
anonymous access mode. The client MUST omit the "client_secret" parameter in
this case. The server MUST ignore the value of the "scope" parameter.

In anonymous mode the server allocates a new channel and grants the client
restricted access (no message payloads) to this channel. The channel is not
bound to a bus until the first message is posted to the channel.

If both "client_id" and "client_secret" are present, the server MUST check
the credentials of the client. If the credentials are valid, authenticated
access mode is assumed; otherwise the server MUST return error per section
5.2 of the OAuth 2.0 spec (error "unautorized_client").

In authenticated mode the server MUST check that the client making the request
is authorized to access the buses enlisted in the value of the parameter. If
the client is not authorized to access a bus it's requesting access to, the
server MUST return error per section 5.2 of the OAuth spec (error
"invalid_scope").

In authenticated mode the server grants the client full access to the
specified buses. If no "scope" parameter was specified in the request, the
client is granted access to all buses it is authorized to per the server
configuration. Full access implies that the client can retrieve full
messages (including payloads) and post messages to the buses it has been
granted access to as a result of the request.

On success, returns a JSON object per section 5.1 of the OAuth spec.

Tokens granted to anonymous clients MUST expire. It is RECOMMENDED that
such tokens expire within 1 hour after having been issued.

The server MUST include the "expires_in" parameter if the issued token is
set to expire.

The server MUST NOT include the "refresh_token" into the response.

Response example:
{
	"access_token": "465203f03680f59b7ddd5e1e5d851461",
	"token_type": "Bearer"
}

GET /channel
------------

Allocate a new Backplane channel.

Parameters:
 • callback (string, optional) — to package results as JSONP.

Returns:
 • channel (string) — unguessable channel id.
 • next_chain_url (string) — URL of a message chain within the channel.

Response example:
{
	"channel": "67dc880cc265b0dbc755ea959b257118"
	"next_chain_url": "https://bp.example.com/v2/chain/958bfa2dd8aed82c86afbd54b4a314a5"
}

GET /chain/<CHAIN>
------------------

Retrieve the next chain of messages from a source (channel or bus).

Parameters:
 • block (integer, default 0) — if no messages are available for immediate
	 retrieval, this parameter communicates how long (in seconds) the
	 server should wait before returning an empty response.
 • callback (string, optional) — to package results as JSONP.

Returns:
 • next_chain_url (string) — URL of a message chain following the
	last message retrieved with this API call.
 • messages[] — an array of messages within the chain in order as
	they were originally received by the server. Each message
	within the array is represented as a JSON object with the
	same structure as returned by "GET /message/<MSG>" API
	method.

Response example:
{
	"next_chain_url": "https://bp.example.com/v2/chain/958bfa2dd8aed82c86afbd54b4a314a5",
	"messages": [
		{
			"bus": "customer.com",
			"channel": "67dc880cc265b0dbc755ea959b257118",
			"messageURL": "https://bp.example.com/v2/message/097a5cc401001f95b45d37aca32a3bd2",
			"originURL": "https://bp.example.com/v2/client/echo",
			"payload": {
				"role": "administrator"
			},
			"type": "identity/ack"
		}
	]
}

GET /client/<CLIENT>
--------------------

Returns public information about <CLIENT>.

Parameters:
 • callback (string, optional) — to package results as JSONP.

Returns:
 • title (string) — client title.
 • wellKnownTLD (string) — a well-known top-level domain that belongs to the
	 client.

Response example:
{
	"title": "Echo",
	"wellKnownTLD": "aboutecho.com"
}

POST /message (privileged access only)
--------------------------------------

Publish a message to the Backplane.

Parameters:
 • bus (string) — the bus to post the message to.
 • channel (string) — the id of a Backplane channel to post the message to.
 	The channel has to belong to the bus associated with the client.
 • payload (object, optional) — message payload. Only available to
	privileged access clients.
 • type (string) — message type (arbitrary string).

Returns:
 • Status code 201 ("Created") upon success. The "Location" header of the
 response refers to the message resource URL.
 • Status code XXX if the client has no permission to post to the channel.

Request example:
{
	"bus": "customer.com",
	"channel": "67dc880cc265b0dbc755ea959b257118",
	"payload": {
		"role": "administrator"
	},
	"type": "identity/ack"
}

GET /message/<MSG>
------------------

Retrieve a message from the server.

Parameters:
 • callback (string, optional) — to package results as JSONP.

Returns:
 • Status code 200 ("OK") if the message is available. The body of the
 response is a JSON object of the following structure:
	 • bus (string) — the Backplane bus the message was posted do.
	 • channel (string) — the id of a Backplane channel the message was
		posted do.
	 • messageURL (string) — a URL of the message.
	 • originURL (string) — the resource URL of a client which
		originally posted the message.
	 • payload (object, optional) — message payload. Only available to
		privileged access clients.
	 • type (string) — message type (arbitrary string).

Response example:
{
	"bus": "customer.com",
	"channel": "67dc880cc265b0dbc755ea959b257118",
	"messageURL": "https://bp.example.com/v2/message/097a5cc401001f95b45d37aca32a3bd2",
	"originURL": "https://bp.example.com/v2/client/echo",
	"payload": {
		"role": "administrator"
	},
	"type": "identity/ack"
}
