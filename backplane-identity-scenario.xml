<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="./lib/xslt/rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "./lib/xslt/rfc2629.dtd" [
  <!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC1738 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1738.xml">
  <!ENTITY RFC3986 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
  <!ENTITY RFC4627 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml">
]>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc private="Backplane Identity Scenario Working Group"?>
<rfc>
  <front><!-- [[[ -->
    <title abbrev="BackplaneIdentityScenario">Backplane Identity Scenario 1.2 - draft 05</title>

    <author fullname="Chris Saad" initials="C." surname="Saad">
      <organization>Echo</organization>
      <address>
        <email>chris@aboutecho.com</email>
        <uri>http://aboutecho.com</uri>
      </address>
    </author>

    <author fullname="Vlad Skvortsov" initials="V." surname="Skvortsov">
      <organization>Echo</organization>
      <address>
        <email>vss@aboutecho.com</email>
        <uri>http://aboutecho.com</uri>
      </address>
    </author>

    <author fullname="Yuri Lukyanov" initials="Y." surname="Lukyanov">
      <organization>Echo</organization>
      <address>
        <email>snaky@aboutecho.com</email>
        <uri>http://aboutecho.com</uri>
      </address>
    </author>

    <author fullname="Alexander Zhuravlev" initials="A." surname="Zhuravlev">
      <organization>Echo</organization>
      <address>
        <email>zaa@aboutecho.com</email>
        <uri>http://aboutecho.com</uri>
      </address>
    </author>

    <author fullname="Ivan Glushkov" initials="I." surname="Glushkov">
      <organization>Echo</organization>
      <address>
        <email>gli@aboutecho.com</email>
        <uri>http://aboutecho.com</uri>
      </address>
    </author>

    <author fullname="Carl Howells" initials="C." surname="Howells">
      <organization>Janrain</organization>
      <address>
        <email>chowells@janrain.com</email>
        <uri>http://www.janrain.com/</uri>
      </address>
    </author>

    <author fullname="Tom Raney" initials="T." surname="Raney">
      <organization>Janrain</organization>
      <address>
        <email>traney@janrain.com</email>
        <uri>http://www.janrain.com/</uri>
      </address>
    </author>

    <author fullname="Johnny Bufu" initials="J." surname="Bufu">
      <organization>Janrain</organization>
      <address>
        <email>jbufu@janrain.com</email>
        <uri>http://www.janrain.com/</uri>
      </address>
    </author>

    <date day="8" month="December" year="2011" />

    <abstract>
      <t>
        This document describes a Backplane application scenario
        that allows widgets to exchange identity data and information
        about authentication events.
      </t>
    </abstract>

  </front><!-- ]]] -->

  <middle><!-- [[[ -->
    <section anchor="introduction" title="Introduction"><!-- [[[ -->

      <t>
        Login widgets can facilitate user authentication against
        third-party identity providers and then use Backplane to publish
        the authenticated identifiers, details about the authentication
        event and user profile data for the other widgets on the page to
        consume.
      </t>

      <section anchor="definitions" title="Definitions">

        <t>
          In addition to the terms defined by <xref target="Backplane1.2"/>,
          the following are also defined:

          <list style="hanging">

            <t hangText="Identity Provider">
              Third party entity that performs user authentication and
              provides an assertion about the authentication result in
              the form of a User Identifier being authenticated
              (logged-in) or not authenticated (logged-out). Optionally
              the Identity Provider can provide user profile data.
            </t>

            <t hangText="User Identifier">
              Identifier associated by an Identity Provider with a user
              for whom it has an account and it can authenticate.
            </t>

            <t hangText="User Identity Information">
              Data associated with a User Identifier such as profile
              information or attributes.
            </t>

            <t hangText="Login Widget">
              A Widget that facilitates user authentication against an
              Identity Provider and uses Backplane to publish related
              information for the other Widgets on the same Web Page.
            </t>

            <t hangText="Logged-in State">
              A User Identifier is in a Logged-in State on a Channel
              if the last message posted by a Login Widget on that
              Channel about that User Identifer asserts the
              authenticated state (i.e. is of type "identity/login",
              see <xref target="message.type.identity.login"/>).
            </t>

            <t hangText="Logged-out State">
              A User Identifier is in a Logged-out State on a Channel
              if the last message posted by a Login Widget on that
              Channel about that User Identifer asserts the not
              authenticated state (i.e. is of type "identity/logout",
              see <xref target="message.type.identity.login"/>), or if
              there are no messages from any Login Widgets on the
              Channel about the User Identifier asserting the
              authenticated state (i.e. no messages of type
              "identity/login", see see
              <xref target="message.type.identity.login"/>).
            </t>

          </list>

        </t>

      </section>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
          NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described
          in <xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section><!-- ]]] -->

    <section anchor="protocol.flow" title="Protocol Flow">

      <t>
        The following events and actions constitute the Identity
        Scenario protocol.
      </t>

      <section anchor="user.login" title="User Login">
        <t>
          Whenever a Login Widget on a Web Page facilitates a user
          login, a
          <xref target="message.type.identity.login">identity/login</xref>
          message MUST be published on the Channel associated with
          the Web Page.
        </t>
        <t>
          The party responsible for posting the identity/login message
          is the Login Widget's provider. The manner in which the Login
          Widget's provider accomplishes this is outside the scope of
          this specification.
        </t>
        <t>
          The identity/login messages posted as a result of a user
          login event MUST have the sticky flag set to
          <spanx style="emph">true</spanx>, in order for them them to
          be retained for a longer time by the Backplane Server and
          allow other parties to use them to reconstruct the Logged-in
          or Logged-out States of the User Identifiers that are or were
          present in a Channel.
        </t>
        <t>
          Note that multiple user login events can be initiated from a
          Web Page and the corresponding identity/login messages for
          each of them will be posted on the Channel; therefore multiple
          User Identifiers MAY exist in the Logged-in State on a
          Channel at a given time.
        </t>
      </section>

      <section anchor="user.logout" title="User Logout">
        <t>
          Whenever a Login Widget on a Web Page facilitates a user
          logout, a
          <xref target="message.type.identity.logout">identity/logout</xref>
          message MUST be published on the Channel associated with
          the Web Page.
        </t>
        <t>
          The party responsible for posting the identity/logout message
          is the Login Widget's provider. The manner in which the Login
          Widget's provider accomplishes this is outside the scope of
          this specification.
        </t>
        <t>
          The identity/logout messages posted as a result of a user
          logout event MUST have the sticky flag set to
          <spanx style="emph">true</spanx>, in order for them them to
          be retained for a longer time by the Backplane Server and
          allow other parties to use them to reconstruct the Logged-in
          or Logged-out States of the User Identifiers that are or were
          present in a Channel.
        </t>
      </section>

      <section anchor="user.data.update" title="User Identity Information Update">
        <t>
          When User Identity Information changes (either at the Identity
          Provider or at a different party that maintains it), a
          <xref target="message.type.identity.update">identity/update</xref>
          message SHOULD be posted on the Channel associated with the
          Web Page.
        </t>
        <t>
          The party responsible for detecting the change and for posting
          the identity/update message is the Login Widget's provider.
          The manner in which the Login Widget's provider accomplishes
          this is outside the scope of this specification.
        </t>
        <t>
          The identity/update message MUST only contain the pieces of
          User Identity Information that have changed, not the complete
          set of User Identity Information data, as described in
          <xref target="identity.information.update"/>.
        </t>
        <t>
          The identity/update messages MUST have the sticky flag set to
          <spanx style="emph">false</spanx>.
        </t>
      </section>

      <section anchor="page.load" title="Page Load">
        <t>
          Whenever a Web Page containing a Login Widget is loaded the
          Logged-in State of all User Identifiers that are or were
          present in the Channel MUST be advertised by having the last
          identity/login messages for each User Identifier re-posted on
          the Channel.
        </t>
        <t>
          The parties responsible detecting a page load and posting the
          identity/login messages relevant for each User Identifier are
          the Login Widget's providers that facilitated the
          authentication of the respective users. The manner in which
          the Login Widget's providers accomplish this task is outside
          the scope of this specification. They MAY use the
          sticky identity/login and identity/logout messages retained
          in the Channel.
        </t>
        <t>
          The identity/login messages posted as a result of a page load
          event MUST have the sticky flag set to
          <spanx style="emph">false</spanx>, as they are intended for a
          one-time consumption by Widgets interested in discovering the
          Logged-in States of the Users Identifiers that are present on
          the Channel.
        </t>
      </section>

    </section>

    <section anchor="message.types" title="Message Types">

      <t>
        Following are definitions of the Backplane message types
        employed by the Identity Scenario.
      </t>

      <section anchor="message.type.identity.login" title="identity/login">
        <t>
          The payload of the 'identity/login' message is a JSON object
          which contains the following fields:
          <list style="hanging">
            <t hangText="context">
              the URL of the Web Page where the user login was initiated
            </t>
            <t hangText="identities">
              a Portable Contacts object listing the authenticated User
              Identifiers, in the format defined in
              <xref target="identity.information"/>
            </t>
          </list>
        </t>
      </section>

      <section anchor="message.type.identity.logout" title="identity/logout">
        <t>
          The payload of the 'identity/logout' message is a JSON object
          which contains the following fields:
          <list style="hanging">
            <t hangText="context">
              the URL of the Web Page where the user logout was initiated
            </t>
            <t hangText="identities">
              a Portable Contacts object listing the User Identifiers
              that are no longer authenticated, in the format defined in
              <xref target="identity.information"/>
            </t>
          </list>
        </t>
      </section>

      <section anchor="message.type.identity.update" title="identity/update">
        <t>
          The payload of the 'identity/update' message is a JSON object
          which contains the following fields:
          <list style="hanging">
            <t hangText="context">
              the URL of the Web Page to which the User Identity
              Information update is addressed
            </t>
            <t hangText="identities">
              a Portable Contacts object listing the User Identifiers
              for which the User Identity Information has changed, with
              the subset of User Identity Information data that has
              actually changed, as described in
              <xref target="identity.information.update"/>
            </t>
          </list>
        </t>
      </section>

    </section>

    <section anchor="identity.information" title="User Identity Information">

      <t>
        User Identity Information communicated between Backplane
        parties in this scenario is represented in
        <xref target="PortableContacts">Portable Contacts</xref>
        format with some restrictions and extensions.
      </t>

      <t>
        Portable Contacts data is presented in the
        <xref target="RFC4627">JSON</xref> format.
      </t>

      <t>
        Since the scenario deals with a single user (the one performing
        identity-related actions in the context of a concrete browsing
        session), "entry" object in the Portable Contacts response node
        MUST contain a single value.
      </t>

      <t>
        The "entry" object value MUST contain the "accounts" element
        with at least one item. Each of the account items represents
        an identity.
      </t>

      <t>
        An User Identifier is represented by an "identityUrl" element,
        which can be either a plain <xref target="RFC1738">URL</xref>,
        or normalized SGN <xref target="RFC3986">URI</xref> constructed
        from domain/userid pair by putting these values together:
        <spanx style="verb">sgn://&lt;DOMAIN&gt;/?ident=&lt;USERID&gt;</spanx>.
        In the latter case SGN URI MUST be recognized by
        <xref target="Google.SGNodeMapper">Google's SGNodeMapper</xref>.
      </t>

      <figure>
        <preamble>
          Example of a User Identity Information data set expressed as a
          Portable Contacts entry that may be transferred in a Backplane
          message:

        </preamble>
        <artwork type="example">

{
    "startIndex": 0,
    "itemsPerPage": 1,
    "totalResults": 1,
    "entry": [
        {
        "accounts":
            {
                "identityUrl" : "http://twitter.com/johndoe",
                "username": "johndoe",
                "emails": [{
                    "value": "username@email.com",
                    "primary": "true"
                }],
                "photos": [
                  {
                      "value": "http://img.twitter.com/johndoe1.jpg"
                      "type": "original"
                  },
                  {
                      "value": "http://img.twitter.com/johndoe2.jpg"
                      "type": "thumbnail"
                  },
                  {
                      "value": "http://img.twitter.com/johndoe3.jpg"
                      "type": "small"
                  },
                  {
                      "value": "http://img.twitter.com/johndoe4.jpg"
                      "type": "normal"
                  },
                  {
                      "value": "http://img.twitter.com/johndoe5.jpg"
                      "type": "large"
                  },
                  {
                      "value": "http://img.twitter.com/johndoe6.jpg"
                      "type": "avatar"
                  }
                ]
            },
            {
                "identityUrl": "http://example.com/user/johndoe"
            },
            {
                "identityUrl": "sgn://livejournal.com/?ident=johndoe"
            }

        }
    ]
}
      </artwork></figure>

      <section anchor="identity.information.update" title="Update">

        <t>
          A User Identity Information update is a subset of the complete
          set of a User Identity Information, corresponding to a
          <xref target="user.data.update">User Identity Information
          Update</xref> event.
        </t>
        <t>
          The corresponding Portable Contacts entry MUST only contain
          the pieces of information that have changed.
        </t>

        <figure>
          <preamble>
            Example of a User Identity Information update expressed as a
            Portable Contacts entry that may be transferred in a Backplane
            message:
          </preamble>
          <artwork type="example">
{
    "startIndex": 0,
    "itemsPerPage": 1,
    "totalResults": 1,
    "entry": [
        {
        "accounts":
            {
                "identityUrl" : "http://twitter.com/johndoe",
                "photos": [
                  {
                      "value": "http://img.twitter.com/johndoe2-new.jpg"
                      "type": "thumbnail"
                  }
                ]
            }

        }
    ]
}
          </artwork>
        </figure>

      </section>

    </section> <!-- ]]] -->

    <section anchor="use.cases" title="Use Cases"><!-- [[[ -->
      <t>
        The following use cases are believed to be the most common ones,
        illustrating how Widgets discover the Logged-in (or Logged-out)
        State in two contexts:
        <list style="numbers">
          <t>
            right after a user login event occurs
          </t>
          <t>
            when a Web Page is (re)loaded
          </t>
        </list>
        Other use cases are, of course, possible.
      </t>

      <section anchor="use.cases.user.login" title="User Login">
        <t>
          <list style="numbers">
            <t>
              Backplane.js library initializes on each page load:
              <list style="numbers">
                <t>
                  reads the channel_id from a previously set cookie, or
                </t>
                <t>
                  retrieves a new channel_id from the Backplane Server
                </t>
                <t>
                  sets up polling for new messages from the Backplane
                  Server at regular intervals
                </t>
              </list>
            </t>
            <t>
              Widgets on the page subscribe to receive notifications for
              all Backplane messages, or for specific message types that
              they are interested in; for Identity Scenario, presumably
              identity/* messages types
            </t>
            <t>
              User clicks the Login link for a Login Widget that exists
              on the Web Page
            </t>
            <t>
              After the user is authenticated, Login Widget's
              server-side component posts a identity/login message on
              the Channel
            </t>
            <t>
              Backplane.js library receives the identity/login message
              and notifies the Widgets on the Web Page that have
              registered for identity/login notifications
            </t>
            <t>
              Widgets interested in user login events consume the
              message and react to the login event as they see fit
            </t>
          </list>
        </t>
      </section>

      <section anchor="use.cases.user.logout" title="User Logout">
        <t>
          <list style="numbers">
            <t>
              Backplane.js library initializes on each page load:
              <list style="numbers">
                <t>
                  reads the channel_id from a previously set cookie, or
                </t>
                <t>
                  retrieves a new channel_id from the Backplane Server
                </t>
                <t>
                  sets up polling for new messages from the Backplane
                  Server at regular intervals
                </t>
              </list>
            </t>
            <t>
              Widgets on the page subscribe to receive notifications for
              all Backplane messages, or for specific message types that
              they are interested in; for Identity Scenario, presumably
              identity/* messages types
            </t>
            <t>
              A User Identifier in the Logged-in State exists on the
              Channel from a previous interaction
            </t>
            <t>
              The user initiates a logout event by clicking o a link or
              button provided by the Login Widget
            </t>
            <t>
              Login Widget's server-side component posts a identity/logout
              message on the Channel
            </t>
            <t>
              Backplane.js library receives the identity/logout message
              and notifies the Widgets on the Web Page that have
              registered for identity/logout notifications
            </t>
            <t>
              Widgets interested in user logout events consume the
              message and react to the logout event as they see fit
            </t>
          </list>
        </t>
      </section>

      <section anchor="use.cases.web.page.reload" title="Web Page (Re)Load">
        <t>
          <list style="numbers">
            <t>
              Backplane.js library initializes on each page load:
              <list style="numbers">
                <t>
                  reads the channel_id from a previously set cookie, or
                </t>
                <t>
                  retrieves a new channel_id from the Backplane Server
                </t>
                <t>
                  sets up polling for new messages from the Backplane
                  Server at regular intervals
                </t>
              </list>
            </t>
            <t>
              Widgets on the page subscribe to receive notifications for
              all Backplane messages, or for specific message types that
              they are interested in; for Identity Scenario, presumably
              identity/* messages types
            </t>
            <t>
              The Login Widget detects that a Web Page (Re)Load has
              occurred.
            </t>
            <t>
              The Login Widget's provider is responsible for and
              re-posts all identity/login messages for all User
              Identifiers that are in the Logged-in State in the Channel
              (that have previously logged in in the Channel, likely on
              a different Web Page on the same domain)
            </t>
            <t>
              Backplane.js library receives the identity/login messages
              and notifies the Widgets on the Web Page that have
              registered for identity/login notifications
            </t>
            <t>
              Widgets interested in user login events consume the
              message and react to the login event as they see fit:
              they effectively discover all User Identifiers that are in
              the Logged-in State in the Channel
            </t>

          </list>
        </t>

      </section>

    </section><!-- ]]] -->
  </middle><!-- ]]] -->

  <back><!-- [[[ -->
    <references title="Normative References"><!-- [[[ -->

      <reference anchor="Backplane1.2" target="https://sites.google.com/site/backplanespec/documentation/backplane1-2">
        <front>
          <title>Backplane 1.2</title>
          <author fullname="Chris Saad" initials="C." surname="Saad">
            <organization>Echo</organization>
            <address>
              <email>chris@aboutecho.com</email>
              <uri>http://aboutecho.com</uri>
            </address>
          </author>
          <author fullname="Vlad Skvortsov" initials="V." surname="Skvortsov">
            <organization>Echo</organization>
            <address>
              <email>vss@aboutecho.com</email>
              <uri>http://aboutecho.com</uri>
            </address>
          </author>
          <author fullname="Yuri Lukyanov" initials="Y." surname="Lukyanov">
            <organization>Echo</organization>
            <address>
              <email>snaky@aboutecho.com</email>
              <uri>http://aboutecho.com</uri>
            </address>
          </author>
          <author fullname="Alexander Zhuravlev" initials="A." surname="Zhuravlev">
            <organization>Echo</organization>
            <address>
              <email>zaa@aboutecho.com</email>
              <uri>http://aboutecho.com</uri>
            </address>
          </author>
          <author fullname="Ivan Glushkov" initials="I." surname="Glushkov">
            <organization>Echo</organization>
            <address>
              <email>gli@aboutecho.com</email>
              <uri>http://aboutecho.com</uri>
            </address>
          </author>
          <author fullname="Carl Howells" initials="C." surname="Howells">
            <organization>Janrain</organization>
            <address>
              <email>chowells@janrain.com</email>
              <uri>http://www.janrain.com/</uri>
            </address>
          </author>
          <author fullname="Johnny Bufu" initials="J." surname="Bufu">
            <organization>Janrain</organization>
            <address>
              <email>jbufu@janrain.com</email>
              <uri>http://www.janrain.com/</uri>
            </address>
          </author>
          <date day="23" month="June" year="2011" />
        </front>
      </reference>

      &RFC2119;

      &RFC1738;

      &RFC3986;

      &RFC4627;

      <reference anchor="PortableContacts"
        target="http://portablecontacts.net/draft-spec.html#response-format">
        <front>
          <title>Portable Contacts 1.0 Draft C</title>
          <author initials="J." surname="Smarr" fullname="Joseph Smarr">
            <organization>Plaxo</organization>
          </author>
          <date year="2008" month="August" day="5"/>
        </front>
      </reference>

      <reference anchor="Google.SGNodeMapper"
        target="http://code.google.com/p/google-sgnodemapper/">
        <front>
          <title>SocialGraph Node Mapper</title>
          <author initials="B." surname="Fitzpatrick" fullname="Brad Fitzpatrick">
            <organization>Google</organization>
          </author>
          <date year="2010"/>
        </front>
      </reference>
    </references><!-- ]]] -->
  </back><!-- ]]] -->
</rfc>
