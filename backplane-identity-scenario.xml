<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="./lib/xslt/rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "./lib/xslt/rfc2629.dtd" [
  <!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC1738 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1738.xml">
  <!ENTITY RFC3986 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
  <!ENTITY RFC4627 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml">
]>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc private="Backplane Identity Scenario Working Group"?>
<rfc>
  <front><!-- [[[ -->
    <title abbrev="BackplaneIdentityScenario">Backplane Identity Scenario 2.0 - draft 02</title>

    <author fullname="Chris Saad" initials="C." surname="Saad">
      <organization>Echo</organization>
      <address>
        <email>chris@aboutecho.com</email>
        <uri>http://aboutecho.com</uri>
      </address>
    </author>

    <author fullname="Vlad Skvortsov" initials="V." surname="Skvortsov">
      <organization>Echo</organization>
      <address>
        <email>vss@aboutecho.com</email>
        <uri>http://aboutecho.com</uri>
      </address>
    </author>

    <author fullname="Yuri Lukyanov" initials="Y." surname="Lukyanov">
      <organization>Echo</organization>
      <address>
        <email>snaky@aboutecho.com</email>
        <uri>http://aboutecho.com</uri>
      </address>
    </author>

    <author fullname="Alexander Zhuravlev" initials="A." surname="Zhuravlev">
      <organization>Echo</organization>
      <address>
        <email>zaa@aboutecho.com</email>
        <uri>http://aboutecho.com</uri>
      </address>
    </author>

    <author fullname="Ivan Glushkov" initials="I." surname="Glushkov">
      <organization>Echo</organization>
      <address>
        <email>gli@aboutecho.com</email>
        <uri>http://aboutecho.com</uri>
      </address>
    </author>

    <author fullname="Carl Howells" initials="C." surname="Howells">
      <organization>Janrain</organization>
      <address>
        <email>chowells@janrain.com</email>
        <uri>http://www.janrain.com/</uri>
      </address>
    </author>

    <author fullname="Tom Raney" initials="T." surname="Raney">
      <organization>Janrain</organization>
      <address>
        <email>traney@janrain.com</email>
        <uri>http://www.janrain.com/</uri>
      </address>
    </author>

    <author fullname="Johnny Bufu" initials="J." surname="Bufu">
      <organization>Janrain</organization>
      <address>
        <email>jbufu@janrain.com</email>
        <uri>http://www.janrain.com/</uri>
      </address>
    </author>

    <date day="16" month="February" year="2012" />

    <abstract>
      <t>
        This document describes a Backplane application scenario
        that allows widgets to exchange identity information about
        authentication events.
      </t>
    </abstract>

  </front><!-- ]]] -->

  <middle><!-- [[[ -->
    <section anchor="introduction" title="Introduction"><!-- [[[ -->

      <t>
        Login widgets can facilitate user authentication against
        third-party identity providers and then use Backplane to publish
        the authenticated identifiers, details about the authentication
        event and user profile data for the other widgets on the page to
        consume.
      </t>

      <section anchor="definitions" title="Definitions">

        <t>
          [[[ TODO: remove draft reference ]]]
          In addition to the terms defined by <xref target="Backplane2.0"/>,
          the following are also defined:

          <list style="hanging">

            <t hangText="User">
              Human involved in online transactions that may involve
              authentication and exchange of Identity Information.
            </t>

            <t hangText="Identity Provider">
              Third party entity that performs user authentication and
              provides an assertion about the authentication result in
              the form of a User's Account Identifier being
              authenticated (logged-in) or not authenticated
              (logged-out). Optionally the Identity Provider can provide
              additional Identity Information about the User.
            </t>

            <t hangText="Account">
              Entry maintained by an Identity Provider for a User.
            </t>

            <t hangText="Account Identifier">
              Unique string identifier associated by an Identity
              Provider with a User for whom it has an Account and it can
              authenticate. Account Identifiers SHOULD be URIs. It is
              RECOMMENDED however to limit account identifiers to URLs
              or URIs of <xref target="Webfinger">"acct"</xref> scheme.
            </t>
            
            <t hangText="Linked Account">
              An Account with which another Account has a relationship,
              usually in the form of some control that can be exercised
              by the User controlling the former Account on the latter,
              Linked Account. The relationship and degree of control MAY
              be expressed through Access Credentials. The owner of the
              two Accounts may or may not be the same User.
            </t>

            <t hangText="Access Credentials">
              Credentials associated with a Linked Account that were
              transferred to another Account. They MAY allow the User
              or application acting on the User's behalf and controlling
              the latter Account to perform operations on the Linked
              Account, such as accessing APIs exposed by the Identity
              Provider to retrieve data associated with the Linked
              Account.
            </t>

            <t hangText="Identity Information">
              Data about the User associated with a Account such as
              profile information, attributes or Access Credentials for
              Linked Accounts.
            </t>

            <t hangText="Login Widget">
              A Widget that facilitates user authentication against an
              Identity Provider and uses Backplane to publish related
              information for the other Widgets on the same Web Page.
            </t>

            <t hangText="Logged-in State">
              A Account Identifier is in a Logged-in State on a Channel
              if the last message posted by a Login Widget on that
              Channel about that Account Identifer asserts the
              authenticated state (i.e. is of type "identity/login",
              see <xref target="message.type.identity.login"/>).
            </t>

            <t hangText="Logged-out State">
              A Account Identifier is in a Logged-out State on a Channel
              if the last message posted by a Login Widget on that
              Channel about that Account Identifer asserts the not
              authenticated state (i.e. is of type "identity/logout",
              see <xref target="message.type.identity.login"/>), or if
              there are no messages from any Login Widgets on the
              Channel about the Account Identifier asserting the
              authenticated state (i.e. no messages of type
              "identity/login", see see
              <xref target="message.type.identity.login"/>).
            </t>

          </list>

        </t>

      </section>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
          NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described
          in <xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section><!-- ]]] -->

    <section anchor="protocol.flow" title="Protocol Flow">

      <t>
        The following events and actions constitute the Identity
        Scenario protocol.
      </t>

      <section anchor="user.login" title="User Login">
        <t>
          Whenever a Login Widget on a Web Page facilitates a user
          login, a
          <xref target="message.type.identity.login">identity/login</xref>
          message MUST be published on the Channel associated with
          the Web Page.
        </t>
        <t>
          The party responsible for posting the identity/login message
          is the Login Widget's provider. The manner in which the Login
          Widget's provider accomplishes this is outside the scope of
          this specification.
        </t>
        <t>
          The identity/login messages posted as a result of a user
          login event MUST have the sticky flag set to
          <spanx style="emph">true</spanx>, in order for them them to
          be retained for a longer time by the Backplane Server and
          allow other parties to use them to reconstruct the Logged-in
          or Logged-out States of the Account Identifiers that are or were
          present in a Channel.
        </t>
        <t>
          Note that multiple user login events can be initiated from a
          Web Page and the corresponding identity/login messages for
          each of them will be posted on the Channel; therefore multiple
          Account Identifiers MAY exist in the Logged-in State on a
          Channel at a given time.
        </t>
      </section>

      <section anchor="user.logout" title="User Logout">
        <t>
          Whenever a Login Widget on a Web Page facilitates a user
          logout, a
          <xref target="message.type.identity.logout">identity/logout</xref>
          message MUST be published on the Channel associated with
          the Web Page.
        </t>
        <t>
          The party responsible for posting the identity/logout message
          is the Login Widget's provider. The manner in which the Login
          Widget's provider accomplishes this is outside the scope of
          this specification.
        </t>
        <t>
          The identity/logout messages posted as a result of a user
          logout event MUST have the sticky flag set to
          <spanx style="emph">true</spanx>, in order for them them to
          be retained for a longer time by the Backplane Server and
          allow other parties to use them to reconstruct the Logged-in
          or Logged-out States of the Account Identifiers that are or were
          present in a Channel.
        </t>
      </section>

      <section anchor="user.data.update" title="Identity Information Update">
        <t>
          When Identity Information changes (either at the Identity
          Provider or at a different party that maintains it), a
          <xref target="message.type.identity.update">identity/update</xref>
          message SHOULD be posted on the Channel associated with the
          Web Page.
        </t>
        <t>
          The party responsible for detecting the change and for posting
          the identity/update message is the Login Widget's provider.
          The manner in which the Login Widget's provider accomplishes
          this is outside the scope of this specification.
        </t>
        <t>
          The identity/update message MUST only contain the pieces of
          Identity Information that have changed, not the complete set
          of Identity Information data, as described in
          <xref target="identity.information.update"/>.
        </t>
        <t>
          The identity/update messages MUST have the sticky flag set to
          <spanx style="emph">false</spanx>.
        </t>
      </section>

      <section anchor="page.load" title="Page Load">
        <t>
          Whenever a Web Page containing a Login Widget is loaded the
          Logged-in State of all Account Identifiers that are or were
          present in the Channel MUST be advertised by having the last
          identity/login messages for each Account Identifier re-posted on
          the Channel.
        </t>
        <t>
          The parties responsible detecting a page load and posting the
          identity/login messages relevant for each Account Identifier
          are the Login Widget's providers that facilitated the
          authentication of the respective users. The manner in which
          the Login Widget's providers accomplish this task is outside
          the scope of this specification. They MAY use the
          sticky identity/login and identity/logout messages retained
          in the Channel.
        </t>
        <t>
          The identity/login messages posted as a result of a page load
          event MUST have the sticky flag set to
          <spanx style="emph">false</spanx>, as they are intended for a
          one-time consumption by Widgets interested in discovering the
          Logged-in States of the Users Identifiers that are present on
          the Channel.
        </t>
      </section>

    </section>

    <section anchor="message.types" title="Message Types">

      <t>
        Following are definitions of the Backplane message types
        employed by the Identity Scenario.
      </t>

      <t>
        Note that message payloads are sent only to server-side
        Backplane clients. Widgets only receive message headers: no
        payloads, acting as event notifications. They must contact
        their corresponding server-side components for the details
        on how to fully react to each event.
      </t>

      <section anchor="message.type.identity.login" title="identity/login">
        <t>
          The payload of the 'identity/login' message is a JSON object
          which contains the following fields:
          <list style="hanging">
            <t hangText="context">
              the URL of the Web Page where the user login was initiated
            </t>
            <t hangText="identities">
              a Portable Contacts object listing the authenticated
              Account Identifiers, in the format defined in
              <xref target="identity.information"/>
            </t>
          </list>
        </t>
      </section>

      <section anchor="message.type.identity.logout" title="identity/logout">
        <t>
          The payload of the 'identity/logout' message is a JSON object
          which contains the following fields:
          <list style="hanging">
            <t hangText="context">
              the URL of the Web Page where the user logout was initiated
            </t>
            <t hangText="identities">
              a Portable Contacts object listing the Account Identifiers
              that are no longer authenticated, in the format defined in
              <xref target="identity.information"/>
            </t>
          </list>
        </t>
      </section>

      <section anchor="message.type.identity.update" title="identity/update">
        <t>
          The payload of the 'identity/update' message is a JSON object
          which contains the following fields:
          <list style="hanging">
            <t hangText="context">
              the URL of the Web Page to which the Identity Information
              update is addressed
            </t>
            <t hangText="identities">
              a Portable Contacts object listing the Account Identifiers
              for which the Identity Information has changed, with the
              subset of Identity Information data that has actually
              changed, as described in
              <xref target="identity.information.update"/>
            </t>
          </list>
        </t>
      </section>

    </section>

    <section anchor="identity.information" title="Identity Information">

      <t>
        Identity Information communicated between Backplane
        parties in this scenario is defined in this section
        and is represented in
        <xref target="PortableContacts">Portable Contacts</xref>
        format with some restrictions and extensions.
      </t>

      <t>
        Portable Contacts data MUST be presented in the
        <xref target="RFC4627">JSON</xref> format.
      </t>

      <t>
        The Backplane Identity Scenario deals with a single User -
        the one performing identity-related actions in the context of
        a concrete browsing session. The "entry" object in the Portable
        Contacts response node MUST be an array with a single value
        representing this User and having the Contact Schema defined
        by Portable Contacts, with the restrictions and extensions
        described in the following sub-sections.
      </t>

      <section title="Account Identifier">
        <t>
          The Contact Schema applied to the single "entry" value is
          extended with the following element:

          <list style="hanging">
            <t hangText="accountUri">
              The User's
              <xref target="definitions">Account Identifier</xref>.
            </t>
          </list>
        </t>
        <t>
          The "accountUri" element MUST be present and it MUST have a
          non-empty value.
        </t>
        <t>
          The "accountUri" JSON field name is case-insensitive, for
          better interoperability. Consumers of messages containing
          this field MUST accept all case-insensitive spellings of
          the field's name.
        </t>
        <t>
          Identity Providers may or may not send the same value for 
          the "id" field required by Portable Contacts. 
        </t>
      </section>

      <section title="User Profile">
          <t>
            Identity Providers SHOULD leverage as much as possible the
            Contact Schema defined by Portable Contacts and applied to
            the single "entry" in the response to supply or facilitate
            the exchange of User Profile information.
          </t>
      </section>

      <section title="Access Credentials">
        <t>
          The Contact Schema applied to the single "entry" value is
          extended with the following element:

          <list style="hanging">
            <t hangText="accessCredentials">
              OAuth2 Access Credentials associated with the Account
              represented by the "accountUri" value, as a JSON object
              representing an Access Token Response defined in
              <xref target="OAuth2">Section 5.1</xref>.

              <figure>
                <preamble>
                  Example:
                </preamble>
                <artwork type="example">
"accessCredentials": {
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "scope":"example_scope",
  "example_parameter":"example_value"
}
                </artwork>
              </figure>
            </t>
          </list>
        </t>
      </section>
      <section title="Friends List">
        <t>
          The Contact Schema applied to the single "entry" value is
          extended with the following element:

          <list style="hanging">
            <t hangText="friends">
              A JSON object representing the User's friends. The
              "friends" relationship semantics and JSON data format is
              left to be defined by each Identity Provider.
            </t>
          </list>
        </t>
      </section>

      <section title="Linked Accounts">
        <t>
          The "accounts" element defined by the Contact Schema
          is used to represent
          <xref target="definitions">Linked Accounts</xref>.
        </t>
        <t>
          In addition to the "domain", "userid" and "username" fields,
          the "account" element's schema is extended to allow a entire
          Contact Schema entry, including the extension elements
          defined in the previous sections, but not additional, chained
          linked accounts.
        </t>
        <t>
          Each "account" entry MUST contain the "accountUri" element and
          its value MUST NOT be empty.
        </t>
      </section>

      <figure>
        <preamble>
          Example of a Identity Information data set expressed as a
          Portable Contacts entry that may be transferred in a Backplane
          message:
        </preamble>
        <artwork type="example">

{
    "startIndex": 0,
    "itemsPerPage": 1,
    "totalResults": 1,
    "entry": [
      {
        "id": "https://facebook.com/johndoe",
        "accountUri": "https://facebook.com/johndoe",
          "emails": [{
            "value": "username@email.com",
            "primary": "true"
          }],
        "friends":{[
          "https://facebook.com/friend1",
          "https://facebook.com/friend2",
          "https://facebook.com/friend3",
          "https://facebook.com/friend4"
         ]}
        "photos": [
            {
              "value": "http://img.twitter.com/johndoe1.jpg"
              "type": "original"
            },
            {
              "value": "http://img.twitter.com/johndoe2.jpg"
              "type": "thumbnail"
            },
            {
              "value": "http://img.twitter.com/johndoe3.jpg"
              "type": "small"
            },
            {
              "value": "http://img.twitter.com/johndoe4.jpg"
              "type": "normal"
            },
            {
              "value": "http://img.twitter.com/johndoe5.jpg"
              "type": "large"
            },
            {
              "value": "http://img.twitter.com/johndoe6.jpg"
              "type": "avatar"
            }
        ]
        "accounts": [
            {
              "accountUri" : "http://twitter.com/johndoe",
              "domain": "twitter.com",
              "username": "johndoe"
            },
            {
              "accountUri": "http://example.com/user/johndoe",
              "domain": "example.com",
              "username": "johndoe"
            },
            {
              "accountUri": "sgn://livejournal.com/?ident=johndoe"
              "domain": "livejournal.com",
              "username": "johndoe"
            }
        ]
      }
    ]
}
      </artwork></figure>

      <section anchor="identity.information.update" title="Update">

        <t>
          An Identity Information update is a subset of the complete
          Identity Information, corresponding to a
          <xref target="user.data.update">Identity Information
          Update</xref> event.
        </t>
        <t>
          The corresponding Portable Contacts entry MUST only contain
          the pieces of information that have changed.
        </t>

        <figure>
          <preamble>
            Example of a Identity Information update expressed as a
            Portable Contacts entry that may be transferred in a Backplane
            message:
          </preamble>
          <artwork type="example">
{
    "startIndex": 0,
    "itemsPerPage": 1,
    "totalResults": 1,
    "entry": [
        {
        "accounts": [
            {
                "accountUri" : "http://twitter.com/johndoe",
                "photos": [
                  {
                      "value": "http://img.twitter.com/johndoe2-new.jpg"
                      "type": "thumbnail"
                  }
                ]
            }
        ]
        }
    ]
}
          </artwork>
        </figure>

      </section>

    </section> <!-- ]]] -->

    <section anchor="use.cases" title="Use Cases"><!-- [[[ -->
      <t>
        The following use cases are believed to be the most common ones,
        illustrating how Widgets discover the Logged-in (or Logged-out)
        State in two contexts:
        <list style="numbers">
          <t>
            right after a user login event occurs
          </t>
          <t>
            when a Web Page is (re)loaded
          </t>
        </list>
        Other use cases are, of course, possible.
      </t>

      <section anchor="use.cases.user.login" title="User Login">
        <t>
          <list style="numbers">
            <t>
              Backplane.js library initializes on each page load:
              <list style="numbers">
                <t>
                  reads the channel_id from a previously set cookie, or
                </t>
                <t>
                  retrieves a new channel_id from the Backplane Server
                </t>
                <t>
                  sets up polling for new messages from the Backplane
                  Server at regular intervals
                </t>
              </list>
            </t>
            <t>
              Widgets on the page subscribe to receive notifications for
              all Backplane messages, or for specific message types that
              they are interested in; for Identity Scenario, presumably
              identity/* messages types
            </t>
            <t>
              User clicks the Login link for a Login Widget that exists
              on the Web Page
            </t>
            <t>
              After the user is authenticated, Login Widget's
              server-side component posts a identity/login message on
              the Channel
            </t>
            <t>
              Backplane.js library receives the identity/login message
              and notifies the Widgets on the Web Page that have
              registered for identity/login notifications
            </t>
            <t>
              Widgets interested in user login events consume the
              message and react to the login event as they see fit
            </t>
          </list>
        </t>
      </section>

      <section anchor="use.cases.user.logout.idp" title="User Logout: Identity Provider">
        
        <t>
          If the user logs out from the Identity Provider a
          identity/logout message SHOULD (and ideally MUST) be
          published on the Backplane channel. Widgets can react to this
          state change and update the session they have with the user to
          reflect the new logged-out state.
        </t>
        
        <t>
          <list style="numbers">
            <t>
              Backplane.js library initializes on each page load:
              <list style="numbers">
                <t>
                  reads the channel_id from a previously set cookie, or
                </t>
                <t>
                  retrieves a new channel_id from the Backplane Server
                </t>
                <t>
                  sets up polling for new messages from the Backplane
                  Server at regular intervals
                </t>
              </list>
            </t>
            <t>
              Widgets on the page subscribe to receive notifications for
              all Backplane messages, or for specific message types that
              they are interested in; for Identity Scenario, presumably
              identity/* messages types
            </t>
            <t>
              A Account Identifier in the Logged-in State exists on the
              Channel from a previous interaction
            </t>
            <t>
              The user initiates a Identity Provider logout event by
              clicking o a link or button provided by the Login Widget
            </t>
            <t>
              Login Widget's server-side component posts a identity/logout
              message on the Channel
            </t>
            <t>
              Backplane.js library receives the identity/logout message
              and notifies the Widgets on the Web Page that have
              registered for identity/logout notifications
            </t>
            <t>
              Widgets interested in user logout events consume the
              message and react to the logout event as they see fit
            </t>
          </list>
        </t>
      </section>

      <section anchor="use.cases.user.logout.local" title="User Logout: Site Local">
        
        <t>
          The widgets on a site may wish to end the session they have
          with a user independently from the logged-in or logged-out
          state the user has with their Identity Provider. This can be
          desired if, for example, the site knows the user is leaving
          the site and wants to force a re-login when the user returns,
          or perhaps if the site does not want to rely on the Identity
          Provider support of identity/logout advertisements.
        </t>

        <t>
          In this case the widget must reset the Backplane channel in
          order to ensure the current session and logged-in state is
          ended.
        </t>

        <t>
          <list style="numbers">
            <t>
              Backplane.js library initializes on each page load:
              <list style="numbers">
                <t>
                  reads the channel_id from a previously set cookie, or
                </t>
                <t>
                  retrieves a new channel_id from the Backplane Server
                </t>
                <t>
                  sets up polling for new messages from the Backplane
                  Server at regular intervals
                </t>
              </list>
            </t>
            <t>
              Widgets on the page subscribe to receive notifications for
              all Backplane messages, or for specific message types that
              they are interested in; for Identity Scenario, presumably
              identity/* messages types
            </t>
            <t>
              A Account Identifier in the Logged-in State exists on the
              Channel from a previous interaction
            </t>
            <t>
              The user initiates a site local logout by clicking o a
              link or button provided by the local website
            </t>
            <t>
              The site resets the Backplane channel and terminates the
              local session it has for the user
            </t>
          </list>
        </t>
        <t>
          If the same user (having the same Logged-in state with their
          Identity Provider) returns to a Backplane-enabled page, the
          site has the opportunity to process again the identity/login
          events and create a new local session even though it is the
          same user.
        </t>
      </section>

      <section anchor="use.cases.web.page.reload" title="Web Page (Re)Load">
        <t>
          <list style="numbers">
            <t>
              Backplane.js library initializes on each page load:
              <list style="numbers">
                <t>
                  reads the channel_id from a previously set cookie, or
                </t>
                <t>
                  retrieves a new channel_id from the Backplane Server
                </t>
                <t>
                  sets up polling for new messages from the Backplane
                  Server at regular intervals
                </t>
              </list>
            </t>
            <t>
              Widgets on the page subscribe to receive notifications for
              all Backplane messages, or for specific message types that
              they are interested in; for Identity Scenario, presumably
              identity/* messages types
            </t>
            <t>
              The Login Widget detects that a Web Page (Re)Load has
              occurred.
            </t>
            <t>
              The Login Widget's provider is responsible for and
              re-posts all identity/login messages for all Account
              Identifiers that are in the Logged-in State in the Channel
              (that have previously logged in in the Channel, likely on
              a different Web Page on the same domain)
            </t>
            <t>
              Backplane.js library receives the identity/login messages
              and notifies the Widgets on the Web Page that have
              registered for identity/login notifications
            </t>
            <t>
              Widgets interested in user login events consume the
              message and react to the login event as they see fit:
              they effectively discover all Account Identifiers that are in
              the Logged-in State in the Channel
            </t>

          </list>
        </t>

      </section>

    </section><!-- ]]] -->
  </middle><!-- ]]] -->

  <back><!-- [[[ -->
    <references title="Normative References"><!-- [[[ -->

      <reference anchor="Backplane2.0" target="https://sites.google.com/site/backplanespec/documentation/backplane2-0-draft08">
        <front>
          <title>Backplane 1.2</title>
          <author fullname="Chris Saad" initials="C." surname="Saad">
            <organization>Echo</organization>
            <address>
              <email>chris@aboutecho.com</email>
              <uri>http://aboutecho.com</uri>
            </address>
          </author>
          <author fullname="Vlad Skvortsov" initials="V." surname="Skvortsov">
            <organization>Echo</organization>
            <address>
              <email>vss@aboutecho.com</email>
              <uri>http://aboutecho.com</uri>
            </address>
          </author>
          <author fullname="Yuri Lukyanov" initials="Y." surname="Lukyanov">
            <organization>Echo</organization>
            <address>
              <email>snaky@aboutecho.com</email>
              <uri>http://aboutecho.com</uri>
            </address>
          </author>
          <author fullname="Alexander Zhuravlev" initials="A." surname="Zhuravlev">
            <organization>Echo</organization>
            <address>
              <email>zaa@aboutecho.com</email>
              <uri>http://aboutecho.com</uri>
            </address>
          </author>
          <author fullname="Ivan Glushkov" initials="I." surname="Glushkov">
            <organization>Echo</organization>
            <address>
              <email>gli@aboutecho.com</email>
              <uri>http://aboutecho.com</uri>
            </address>
          </author>
          <author fullname="Carl Howells" initials="C." surname="Howells">
            <organization>Janrain</organization>
            <address>
              <email>chowells@janrain.com</email>
              <uri>http://www.janrain.com/</uri>
            </address>
          </author>
          <author fullname="Johnny Bufu" initials="J." surname="Bufu">
            <organization>Janrain</organization>
            <address>
              <email>jbufu@janrain.com</email>
              <uri>http://www.janrain.com/</uri>
            </address>
          </author>
          <date day="23" month="June" year="2011" />
        </front>
      </reference>

      &RFC2119;

      &RFC1738;

      &RFC3986;

      &RFC4627;

      <reference anchor="PortableContacts"
        target="http://portablecontacts.net/draft-spec.html#response-format">
        <front>
          <title>Portable Contacts 1.0 Draft C</title>
          <author initials="J." surname="Smarr" fullname="Joseph Smarr">
            <organization>Plaxo</organization>
          </author>
          <date year="2008" month="August" day="5"/>
        </front>
      </reference>

      <reference anchor="Webfinger"
        target="http://tools.ietf.org/html/draft-jones-appsawg-webfinger-00#section-4.1">
        <front>
          <title>Webfinger</title>
          <author initials="P.E." surname="Jones" fullname="Paul E. Jones">
            <organization>Cisco Systems, Inc.</organization>
          </author>
          <author initials="G" surname="Salgueiro" fullname="Gonzalo Salgueiro">
            <organization>Cisco Systems, Inc.</organization>
          </author>
          <author initials="J." surname="Smarr" fullname="Joseph Smarr">
            <organization>Google</organization>
          </author>
          <date year="2011" month="October" day="23"/>
        </front>
      </reference>

      <reference
          anchor="OAuth2"
          target="http://tools.ietf.org/html/draft-ietf-oauth-v2">
        <front>
          <title>The OAuth 2.0 Authorization Protocol</title>
          <author initials="E." surname="Habber-Lahav"
                  fullname="E. Hammer-Lahav">
            <organization>Yahoo!</organization>
          </author>
          <author initials="D." surname="Recordon"
                  fullname="D. Recordon">
            <organization>Facebook</organization>
          </author>
          <author initials="D." surname="Hardt"
                  fullname="D. Hardt">
            <organization/>
          </author>
          <date year="2011" month="May" />
        </front>
      </reference>

      <reference anchor="Google.SGNodeMapper"
        target="http://code.google.com/p/google-sgnodemapper/">
        <front>
          <title>SocialGraph Node Mapper</title>
          <author initials="B." surname="Fitzpatrick" fullname="Brad Fitzpatrick">
            <organization>Google</organization>
          </author>
          <date year="2010"/>
        </front>
      </reference>
    </references><!-- ]]] -->
  </back><!-- ]]] -->
</rfc>
